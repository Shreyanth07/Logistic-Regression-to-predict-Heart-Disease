# -*- coding: utf-8 -*-
"""Logistic_regression_heart_disease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i9X0GoX0LlNlsoxPldFsQibWVAkvrwzO
"""

# Commented out IPython magic to ensure Python compatibility.
# Import the required libraries
import numpy as np
import pandas as pd
import matplotlib as plt
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.linear_model import LogisticRegression

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv('/content/drive/MyDrive/Colab Datasets/heart_disease.csv')
data.head(10)

# Observe and analyse the data
print(data.info())

# Checking for NULL spaces
data.isnull().sum()

data["Ca"].replace(to_replace = np.nan, value = 0,inplace = True)
data["Thal"].replace(to_replace = np.nan, value = "normal",inplace = True)
data.isnull().sum()

# binary predictor for yes and no
sns.countplot(x="AHD", data=data)

data = data.replace({'AHD':{'Yes': 1,'No': 0}})
data = data.replace({'ChestPain':{'typical': 0,'nontypical': 1,'nonanginal': 2,'asymptomatic': 3}})
data = data.replace({'Thal':{'normal': 1,'fixed': 2,'reversable': 3}})
data

# Determine the correlation between the variables
corr_matrix = data.corr()
fig, ax = plt.subplots(figsize=(15, 15))
ax = sns.heatmap(corr_matrix,
                 annot=True,
                 linewidths=0.5,
                 fmt=".2f",
                 cmap="YlGnBu");
bottom, top = ax.get_ylim()
ax.set_ylim(bottom + 0.5, top - 0.5)

subData = data[['Age','RestBP','Chol','MaxHR','Oldpeak']]
sns.pairplot(subData,kind="kde")

# Relationship between Heart Disease and Max heart rate & Age in scatter plot
plt.figure(figsize=(12, 8))

plt.scatter(data.Age[data.AHD==1],data.MaxHR[data.AHD==1],c="r")
plt.scatter(data.Age[data.AHD==0],data.MaxHR[data.AHD==0],c="b")

plt.title("Heart Disease in relation to Age and Max Heart Rate")
plt.xlabel("Age")
plt.ylabel("Max Heart Rate")
plt.legend(["Disease", "No Disease"]);

categorical_val = []
continous_val = []
for column in data.columns:
    print('==============================')
    print(f"{column} : {data[column].unique()}")
    if len(data[column].unique()) <= 10:
        categorical_val.append(column)
    else:
        continous_val.append(column)

plt.figure(figsize=(15, 15))

for i, column in enumerate(continous_val, 1):
    plt.subplot(3, 2, i)
    data[data["AHD"] == 0][column].hist(bins=35, color='blue', label='Have Heart Disease = NO', alpha=0.6)
    data[data["AHD"] == 1][column].hist(bins=35, color='red', label='Have Heart Disease = YES', alpha=0.6)
    plt.legend()
    plt.xlabel(column)

"""Conclusions from the plot :
* trestbps: resting blood pressure of anything above 130-140 is generally of concern
* chol: greater than 200 is a concern.
* thalach: People with maximum of over 140 are more likely to have heart disease.
* The old peak of exercise-induced ST depression vs rest concludes heart stress during exercise. An unhealthy heart will be stressing more.
"""

plt.figure(figsize=(15, 15))

for i, column in enumerate(categorical_val, 1):
    plt.subplot(3, 3, i)
    data[data["AHD"] == 0][column].hist(bins=35, color='blue', label='Have Heart Disease = NO', alpha=0.6)
    data[data["AHD"] == 1][column].hist(bins=35, color='red', label='Have Heart Disease = YES', alpha=0.6)
    plt.legend()
    plt.xlabel(column)

"""Conclusions from the plot :
* cp (Chest pain): People with cp of 1, 2 & 3 are more likely to have heart disease than people with cp of 0.
* restecg (resting EKG results): People with a value of 1 are reporting to an abnormal heart rhythm ranging from mild symptoms to severe problems (More likely yo heart disease).
* exang (exercise-induced angina): people with a value of 0 who are considered as No to exercise-induced angina have more heart disease than people with a value of 1 who are considered as Yes to exercise-induced angina.
* slope (Slope of the ST segment [peak exercise]): People with a slope value of 2 are Downsloping meaning signs of an unhealthy heart are more likely to have heart disease than people with a slope of 0  that is Upsloping meaning best heart rate with exercise or a slope of 1 as Flat Sloping meaning minimal change of typical healthy heart.
* ca (number of major vessels (0-3) stained by fluoroscopy): More the movement of blood is for betterment. So people with ca equal to 0 are more likely to have heart disease.
* thal (thallium stress result): People with a thal value of 2 are defect corrected that is once was a defect but now it is fine are more likely to have heart disease.

## Data Model preparation
"""

# Split the data as 80% training and 20% testing
x = data.iloc[:, :-1].values
y = data.iloc[:, -1].values
x_train, x_test, y_train, y_test=train_test_split(x,y, test_size=0.2, random_state=2)

# Dimension of train and test
print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

# Train the machine learning model and generate the classification report of logistic regression
reg=LogisticRegression()
reg.fit(x_train, y_train)

print(reg.predict(x_test[0].reshape(1,-1)))
reg.predict(x_test[0:10])

pred=reg.predict(x_test)
print(pred)
score=reg.score(x_test, y_test)
print(score)

# Predict the accuracy
from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test, pred)
print(cm)
plt.figure(figsize=(20,9))
sns.heatmap(cm, annot=True, fmt=".3f", linewidths=.5, square=True, cmap='Blues_r')
plt.ylabel('Actual Label')
plt.xlabel('Predicted Label')
all_sample_title=f"Accuracy Score: {score}"
plt.title(all_sample_title, size=20)